load_support('rescue'); use_bpm 127.0
#scale C D E♭  F G A♭  B♭

alive kick: 0, crystal: 0, perc: 0,
piano: 1, vocal: 0, kalim: 0, kalim2: 0,
harp: 0, pad: 0,
vastness: 0, waves: 0

vastness_cc filter: 0.0, tone: 1.0, shape: 0.2, pulse: 0
bright_cc cutoff: 0.0
#vastness_x :c3

#Nice progression 7M & 7m
#    [[:C3    :Eb3  :G3 ]   8]      #1 7 5i
#    [[:bb2   :ds3  :f3 ]   4]
#    [[:eb3   :g2   :bb3]   8]

# #nice end
#     [[:c3    :Eb2     :g3 ]   4]      #1 7 5i
#     [[:bb2   :ds2     :f3 ]  2]
#     [[:eb2  :bb2     :d3]   2]

live_loop :test do
  #vastness :f5
  tick
  score = (ing
    [[:C2   :Eb2    :G2]   8]
   # [[:C3   :E3    :G3]   4]

    #[[:bb3    :ds3     :g3 ]  8]
    #[[:eb2    :g2     :bb3 ]  8]


    # [[:bb3   :d3  :f4]   4]
    # [[:F3   :Ab3  :C4]   4]
    # [[:Eb3  :G3   :Bb3]  4]
    # [[:Ab3  :C3   :Eb4]  8]


    # [[:C3   :Eb3  :G3]   8]
    # [[:F3   :bb3  :C4]   4]
    # [[:Eb3   :g3  :C4]    4]
    # [[:Eb3   :ab3  :C4]   4]

    # [[:Eb3  :G3   :Bb3]  4]
    # [[:Ab3  :C4   :Eb4]  8]

    #[[_] 4]
    )
  #tick_reset_all
  s = score.look

  crystal :eb3, 127
  x = spread(1,4).look
  at{
    sleep s[-1] - (s[-1]/2.0)
    kick 127
    sleep (s[-1]/2.0)
    kick 100 if x
  }

  at{
    16.times{
      sleep 1/4.0
      midi (ing :gs3 :as3).look(:in2), (ramp 75, 100, 128).look(:in2), channel: 3 if spread(3,7).tick(:in2)
    }
  }

  #smp Mountain[/kick/,1], amp: 3
  # with_swing ((line -0.1, 0.0,128).look){
  vastness octave(root(s[0]),2),127, sus: s[-1]*2
  # }
  no{
  at{
    sleep (s[-1]/4.0)*2
    vastness octave(root(s[0]),2),110, sus: s[-1]*1
    if s[-1] == 4
      sleep s[-1] - (s[-1]/4.0)
      vastness octave(root(s[0]),3), 127, sus: 1.0
    else
      sleep s[-1] - (s[-1]/4.0)*2
      vastness octave(root(s[0]),4), 127, sus: 1.5*2
      sleep (s[-1]/4.0)
   end
   vastness octave(root(s[0]),2), 120, sus: 0.5
    }
  }
  if s[0][0] == nil
    #more tension....
    vastness :g4, 127, sus: s[-1]*2
    vocal_note =  (ing :G4 :G4 :Eb4 :Bb4).look
    early = spread(1,3).look
    at{
      sleep 1/8.0
      vastness :G2, 127, sus: s[-1] - 1/8.0

      perc vocal_note, 100-(rand*10.0), sus: 6 if early
      sleep 3/8.0
      #vocals
      perc vocal_note, 127-(rand*10.0), sus: 7
    }
  end

  with_swing ((line -0.08, 0.00,32).look){
   bright s[0][0], 100,  sus: s[-1]
  }

  yes{
    crystal s[0][1],120, sus: s[-1]+0.0
    crystal s[0][0],120, sus: s[-1]+0.0
    pad s[0][0],100, sus: s[-1]+0.2, channel: 1, port: :iac_bus_1
    pad s[0][1],120, sus: s[-1]+0.0, channel: 1, port: :iac_bus_1
    pad_cc tone: ((line 0.0, 0.5, 128) + (line 0.5, 0.0, 128)).look
    pad_cc motion: ((line 0.0, 1.0, 128) + (line 1.0, 0.0, 128)).look
  }

  #bright :ab4, (ing 82 82 95).look,  sus: s[-1]
  #bright :C5, 80, sus: 1/2.0

  #midi_note_on :ab3,120, channel: 5

  with_transpose 12{
   harp s[0][-1], 75,  sus: s[-1]
  }

  x=(ing :bb5 [:f5 :ab5].choose :d5).look(offset: 1)
  no{
  at{
    sleep 1.0
    1.times{
      sleep 1.0
      operator x, v=(ine 110 90 3).tick(:inner), sus: 12
      with_transpose -12{ operator x, v, sus: 12}
      sleep 1/2.0
      with_transpose 12{ operator x, v, sus: 12}
      #voices x, 127, sus: 12
      #crystal :fs3
      #bright :c4,70, sus: 12
    }
    }
  }

  s[-1].times{
    #midi s[0][1]+12, (ing 80 100 110).look, sus: s[-1], channel: 9
    if dice(8) > 4
      with_swing((line -0.1, 0.0, 8).look(:in)){
        crystal :d4, (ine 60, 80,32).look-rand_i(15) if spread(1,s[-1]*1).rot(1*(-s[-1]-4)).look(:in)
      }
    end
    sleep 1/2.0
    tick(:in)
    with_swing -0.02{
      #crystal (ing :fs3 :fs3 :gs3).look(:in), 45-rand_i(5) if spread(3,5).look(:in)
    }

    with_swing((line 0, -0.05, 128).look(:in)){
      #bright s[0][-1], (ing 82 82 95).look,  sus: s[-1] if spread(7,11).look(:in)
    }

    sleep 1/2.0
    #crystal :bb3, 35+rand_i(10) if spread(3,5).rot(-1).look(:in)

    yes{
    if spread(1,3).rot(-1 - rand_i(s[-1]*0.5)).look
      at{
          operator :eb5,100
          sleep 1/2.0
          operator :a6, 90
        }
    end
    }

    with_transpose 12{
      #bright s[0][1], (ing 80 100 110).look,  sus: s[-1] if spread(2,3).look(:in)
    }
  }
  #stop
end
